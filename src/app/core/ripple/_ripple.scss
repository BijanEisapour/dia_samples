@import '../theming/theming';
@import '../theming/check-duplicate-styles';
@import '../../../cdk/a11y/a11y';

$dia-ripple-color-opacity: 0.1;

@mixin dia-ripple() {

	// The host element of an dia-ripple directive should always have a position of "absolute" or
	// "relative" so that the ripples inside are correctly positioned relatively to the container.
	.dia-ripple {
		overflow: hidden;

		// By default, every ripple container should have position: relative in favor of creating an
		// easy API for developers using the MatRipple directive.
		position: relative;

		// Promote containers that have ripples to a new layer. We want to target `:not(:empty)`,
		// because we don't want all ripple containers to have their own layer since they're used in a
		// lot of places and the layer is only relevant while animating. Note that ideally we'd use
		// the `contain` property here (see #13175), because `:empty` can be broken by having extra
		// text inside the element, but it isn't very well supported yet.
		&:not(:empty) {
			transform: translateZ(0);
		}
	}

	.dia-ripple.dia-ripple-unbounded {
		overflow: visible;
	}

	.dia-ripple-element {
		position: absolute;
		border-radius: 50%;
		pointer-events: none;

		transition: opacity, transform 0ms cubic-bezier(0, 0, 0.2, 1);
		transform: scale(0);

		// In high contrast mode the ripple is opaque, causing it to obstruct the content.
		@include cdk-high-contrast(active, off) {
			display: none;
		}
	}
}

/* Colors for the ripple elements.*/
@mixin dia-ripple-color($config-or-theme) {
	$config: dia-get-color-config($config-or-theme);
	$foreground: map_get($config, foreground);
	$foreground-base: map_get($foreground, base);

	.dia-ripple-element {

		// If the ripple color is resolves to a color *type*, we can use it directly, otherwise
		// (e.g. it resolves to a CSS variable) we fall back to using the color and setting an opacity.
		@if (type-of($foreground-base)==color) {
			background-color: rgba($foreground-base, $dia-ripple-color-opacity);
		}

		@else {
			background-color: $foreground-base;
			opacity: $dia-ripple-color-opacity;
		}
	}
}

@mixin dia-ripple-theme($theme-or-color-config) {
	$theme: _dia-legacy-get-theme($theme-or-color-config);

	@include _dia-check-duplicate-theme-styles($theme, 'dia-ripple') {
		$color: dia-get-color-config($theme);

		@if $color !=null {
			@include dia-ripple-color($color);
		}
	}
}
